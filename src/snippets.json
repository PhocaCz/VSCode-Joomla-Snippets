{
  "addScriptVersion": {
    "prefix": "j-add-script-version",
    "description": "Adds a linked template script to the page with a version to allow to flush it.",
    "types": "php",
    "body": [
      "JFactory::getDocument()->addScriptVersion(JUri::base() . '/templates/${1:Your Template Name}/${2:Your script address}');"
    ]
  },

  "addStyleSheetVersion": {
    "prefix": "j-add-stylesheet-version",
    "description": "Adds a linked template stylesheet version to the page.",
    "types": "php",
    "body": [
      "JFactory::getDocument()->addStyleSheetVersion(JUri::base() . '/templates/${1:Your Template Name}/${2:Your css address}');"
    ]
  },

  "Deferred Extension addScript": {
    "prefix": "j-add-defer-script-extension",
    "description": "Adds a deferred script to the page, to start optimizing load of files.",
    "types": "php",
    "body": [
      "JHtml::script({$1:Extension Script, for example mod_myext/test.min.js}, ['relative' => true], ['defer' => true]);"
    ]
  },

  "Deferred Remote addScript": {
    "prefix": "j-add-defer-remote-script",
    "description": "Adds a deferred remote script to the page, to start optimizing load of files.",
    "types": "php",
    "body": [
      "JFactory::getDocument()->addScript({$1:Remote URL}, [], ['defer' => true, 'crossorigin' => 'anonymous']);"
    ]
  },

  "Deferred Remote addStyleSheet": {
    "prefix": "j-add-defer-remote-stylesheet",
    "description": "Adds a deferred remote stylesheet to the page, to start optimizing load of files.",
    "types": "php",
    "body": [
      "\\$script = '!function(e){var t=document.createElement(\"link\");t.rel=\"stylesheet\",t.href=\"'{$1:Stylesheet URL}'\",t.type=\"text/css\";var n=document.getElementsByTagName(\"link\")[0];n.parentNode.insertBefore(t,n)}();';",
      "JFactory::getDocument()->addScriptDeclaration(\\$script);"
    ]
  },

  "Inline addStyleDeclaration": {
    "prefix": "j-add-inline-stylesheet",
    "description": "Adds an inline stylesheet declaration to the page, to start reducing the number of loaded files.",
    "types": "php",
    "body": [
      "\\$filePath = JHTMLHelper::stylesheet('mod_.../....min.css', ['version' => 'auto', 'relative' => true, 'pathOnly' => true]);",
      "JFactory::getDocument()->addStyleDeclaration(file_get_contents(JPATH_ROOT . \\$filePath));"
    ]
  },

  "Inline addScriptDeclaration": {
    "prefix": "j-add-inline-script",
    "description": "Adds an inline script to the page, to start reducing the number of loaded files.",
    "types": "php",
    "body": [
      "\\$filePath = JHtml::script('mod_.../....min.js', ['version' => 'auto', 'relative' => true, 'pathOnly' => true]);",
      "JFactory::getDocument()->addScriptDeclaration(file_get_contents(JPATH_ROOT . \\$filePath));"
    ]
  },

  "J4 - Application": {
    "prefix": "j4-app",
    "description": "Adds the Joomla Factory declaration and the app variable declaration.",
    "types": "php",
    "body": [
      "use Joomla\\CMS\\Factory as CMSFactory;",
      "",
      "\\$app = CMSFactory::getApplication();"
    ]
  },

  "J4 - ArrayHelper": {
    "prefix": "j4-arrayhelper",
    "description": "Adds the ArrayHelper declaration.",
    "types": "php",
    "body": [
      "use Joomla\\Utilities\\ArrayHelper;"
    ]
  },

  "J4 - Component Params - Backend": {
    "prefix": "j4-comp-params-backend-cli",
    "description": "Declaration of the component helper and params retrieval.",
    "types": "php",
    "body": [
      "use Joomla\\CMS\\Component\\ComponentHelper;",
      "",
      "\\$params = ComponentHelper::getParams('{$1:com_component}');"
    ]
  },

  "J4 - Component Params - Frontend": {
    "prefix": "j4-comp-params-frontend",
    "description": "Declaration of the component helper and params retrieval.",
    "types": "php",
    "body": [
      "\\$app = CMSFactory::getApplication();",
      "\\$params = \\$app->getParams('{$1:com_component}');"
    ]
  },

  "J4 - Deferred Extension addScriptDeclaration": {
    "prefix": "j4-add-defer-script-extension",
    "description": "Adds a deferred extension script to the page, to start optimizing load of files.",
    "types": "php",
    "body": [
      "use Joomla\\CMS\\HTML\\HTMLHelper as CMSHTMLHelper;",
      "",
      "CMSHTMLHelper::script({$1:Extension Script, for example mod_myext/test.min.js}, ['relative' => true], ['defer' => true]);"
    ]
  },

  "J4 - Deferred Remote addScript": {
    "prefix": "j4-add-defer-remote-script",
    "description": "Adds a deferred remote script to the page, to start optimizing load of files.",
    "types": "php",
    "body": [
      "use Joomla\\CMS\\HTML\\HTMLHelper as CMSHTMLHelper;",
      "",
      "CMSFactory::getDocument()->addScript({$1:Remote URL}, [], ['defer' => true, 'crossorigin' => 'anonymous']);"
    ]
  },

  "J4 - Deferred Remote addStyleSheet": {
    "prefix": "j4-add-defer-remote-stylesheet",
    "description": "Adds a deferred remote stylesheet to the page, to start optimizing load of files.",
    "types": "php",
    "body": [
      "use Joomla\\CMS\\Factory as CMSFactory;",
      "use Joomla\\CMS\\HTML\\HTMLHelper as CMSHTMLHelper;",
      "",
      "\\$script = '!function(e){var t=document.createElement(\"link\");t.rel=\"stylesheet\",t.href=\"'{$1:Stylesheet URL}'\",t.type=\"text/css\";var n=document.getElementsByTagName(\"link\")[0];n.parentNode.insertBefore(t,n)}();';",
      "CMSFactory::getDocument()->addScriptDeclaration(\\$script);"
    ]
  },

  "J4 - Document": {
    "prefix": "j4-doc",
    "description": "Adds the Joomla Factory declaration and the document variable declaration.",
    "types": "php",
    "body": [
      "use Joomla\\CMS\\Factory as CMSFactory;",
      "",
      "\\$doc = CMSFactory::getDocument();"
    ]
  },

  "J4 - Factory": {
    "prefix": "j4-factory",
    "description": "Adds the Joomla Factory declaration.",
    "types": "php",
    "body": [
      "use Joomla\\CMS\\Factory as CMSFactory;"
    ]
  },

  "J4 - Inline addStyleDeclaration": {
    "prefix": "j4-add-inline-style",
    "description": "Adds an inline stylesheet declaration to the page, to start reducing the number of loaded files.",
    "types": "php",
    "body": [
      "use Joomla\\CMS\\Factory as CMSFactory;",
      "use Joomla\\CMS\\HTML\\HTMLHelper as CMSHTMLHelper;",
      "",
      "\\$filePath = CMSHTMLHelper::stylesheet('mod_.../....min.css', ['version' => 'auto', 'relative' => true, 'pathOnly' => true]);",
      "CMSFactory::getDocument()->addStyleDeclaration(file_get_contents(JPATH_ROOT . \\$filePath));"
    ]
  },

  "J4 - Inline addScriptDeclaration": {
    "prefix": "j4-add-inline-script",
    "description": "Adds an inline script to the page, to start reducing the number of loaded files.",
    "types": "php",
    "body": [
      "use Joomla\\CMS\\Factory as CMSFactory;",
      "use Joomla\\CMS\\HTML\\HTMLHelper as CMSHTMLHelper;",
      "",
      "\\$filePath = CMSHTMLHelper::script('mod_.../....min.js', ['version' => 'auto', 'relative' => true, 'pathOnly' => true]);",
      "CMSFactory::getDocument()->addScriptDeclaration(file_get_contents(JPATH_ROOT . \\$filePath));"
    ]
  },

  "J4 - Web JInput": {
    "prefix": "j4-jinput",
    "description": "Declaration of the JInput.",
    "types": "php",
    "body": [
      "use Joomla\\CMS\\Input\\Input as CMSWebInput;",
      "",
      "\\$input = new CMSWebInput;"
    ]
  },

  "J4 - User": {
    "prefix": "j4-user",
    "description": "Adds the Joomla Factory declaration and the app variable declaration.",
    "types": "php",
    "body": [
      "use Joomla\\CMS\\Factory as CMSFactory;",
      "",
      "\\$user = CMSFactory::getUser();"
    ]
  },

  "J4 - Registry": {
    "prefix": "j4-registry",
    "description": "Adds the Joomla Registry declaration.",
    "types": "php",
    "body": [
      "use Joomla\\Registry\\Registry;"
    ]
  },

  "J4 - Text Translation": {
    "prefix": "j4-text-translation",
    "description": "Declares the text translation helper (a.k.a JText::_).",
    "types": "php",
    "body": [
      "use Joomla\\CMS\\Language\\Text as CMSText;",
      "",
      "$l = CMSText::_('{$1:COM_EXAMPLE_A_LABEL}')"
    ]
  },

  "getFormToken": {
    "prefix": "j-formtoken",
    "description": "Method to determine a hash for anti-spoofing variable names.",
    "types": "php",
    "body": [
      "JFactory::getSession()->getFormToken()"
    ]
  },

  "JFunction Declaration": {
    "prefix": "j-function",
    "description": "Standard Joomla function declaration.",
    "types": "php",
    "body": [
      "/**",
      " * $1",
      " *",
      " * @param   string   $aParam  Param",
      " *",
      " * @return  void",
      " */",
      "public function $2()",
      "{",
      "\t$3",
      "}"
    ]
  },

  "JLog": {
    "prefix": "j-log",
    "description": "Method to add an entry to one custom log file.",
    "types": "php",
    "body": [
      "JLog::addLogger(array('logger' => 'formattedtext', 'text_file' => '{$1:File name}.log.php'), JLog::ALL, array('{$1:com_example}.log'));",
      "JLog::add('Message ... ', JLog::INFO, '{$1:com_example}.log');"
    ]
  },

  "JText": {
    "prefix": "j-text",
    "description": "Expand a JText for Joomla 3. Translates a string into the current language.",
    "types": "php",
    "body": ["echo JText::_('$1');"]
  },

  "Template Headers": {
    "prefix": "j-head",
    "description": "Common template header variables for Joomla 3.",
    "types": "php",
    "body": [
      "defined('_JEXEC') or die;",
      "\\$app = JFactory::getApplication();",
      "\\$doc = JFactory::getDocument();",
      "\\$user = JFactory::getUser();",
      "\\$this->language = \\$doc->language;",
      "\\$this->direction = \\$doc->direction;"
    ]
  },

  "JDOC - Add a module position to a template.": {
    "prefix": "jdoc-add-module-position",
    "description": "Add a module position to a template.",
    "types": "php",
    "body": [
      "<jdoc:include type=\"modules\" name=\"${1:Type the module position}\" style=\"${2: Type the module style};\"></jdoc:include>"
    ]
  }
}
